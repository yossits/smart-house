{"version":3,"sources":["components/AddRoom.jsx","components/RoomButton.jsx","components/Title.jsx","components/RoomWindow.jsx","components/AddRoomButton.jsx","components/AddProduct.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["withRouter","setDataRoom","history","useState","roomSelectInput","setroomSelectInput","roomNameInput","setRoomNameInput","background","setbackground","show","setShow","className","Alert","variant","onClose","dismissible","Heading","AlertDismissibleExample","onChange","e","target","value","name","label","length","maxLength","placeholder","type","onChangeComplete","hex","onClick","push","RoomButton","setroomIndex","color","index","to","style","backgroundColor","Title","RoomWindow","dataRoom","flag","setflag","Select","setSelect","products","ProductStatusCheck","console","log","alert","i","CheckStereoSystemExsist","select","CheckBoilerExsist","mode","SetOption","AddRoomButton","stateByColor","state","toggle","productName","Home","ProductList","roomIndex","map","element","key","App","comeFromAddRoom","roomSelect","roomName","roomColor","GetProducts","list","temp","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79922f72.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport '../css/AddRoom.css'\nimport { CirclePicker } from 'react-color'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Alert from 'react-bootstrap/Alert';\n\n\n\nconst AddRoom =({ setDataRoom, history })=>{\n\n    const [roomSelectInput, setroomSelectInput] = useState('')\n    const [roomNameInput, setRoomNameInput] = useState('')\n    const [background, setbackground] = useState('#fff')\n    const [show, setShow] = useState(false);\n\n    const roomName = (e) => {\n        if (e.target.value.length > 0) {\n            setRoomNameInput(e.target.value)\n\n        } else {\n            setRoomNameInput('')\n        }\n    }\n\n    const roomColor = (e) => {\n        setbackground(e.hex)\n    }\n\n    const sendDateToApp = () => {\n        if (roomSelectInput.length < 1 || roomNameInput.length < 1) {\n            setShow(true)\n        } else {\n            setDataRoom(roomSelectInput, roomNameInput, background) \n            history.push('/');\n        }\n    }\n\n    const AlertDismissibleExample = () =>{\n       \n        if (show) {\n          return (\n            <Alert variant=\"danger\" onClose={() => setShow(false)} dismissible>\n              <Alert.Heading>You got an error!</Alert.Heading>\n              <p>\n                you have to choose room name and type\n              </p>\n            </Alert>\n          );\n        }\n    }\n      \n\n    return (\n        <div className=\"AddRoom\">\n\n            {AlertDismissibleExample()}\n            <select onChange={(e) => { setroomSelectInput(e.target.value) }} name=\"room\">\n                <option value=\"\">--Please choose an option--</option>\n                <option value=\"Bedroom\">Bedroom</option>\n                <option value=\"kitchen\">kitchen</option>\n                <optgroup label=\"Bathroom/toilet\">\n                    <option value=\"toilet\">toilet</option>\n                    <option value=\"Bathroom\">Bathroom</option>\n                </optgroup>\n            </select>\n            <br />\n            <input\n                onChange={roomName}\n                maxLength=\"5\"\n                placeholder=\" room name...\"\n                type=\"text\"\n            />\n            <br />\n            <div className=\"AddRoom-circle\">\n                <CirclePicker onChangeComplete={roomColor} />\n            </div>\n            <br />\n            <button onClick={sendDateToApp}>create</button>\n\n        </div>\n    )\n}\nexport default withRouter(AddRoom);","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport '../css/RoomButton.css'\n\nexport default function RoomButton({ setroomIndex, name, color, index }) {\n\n\n\n    return (\n        <div>\n            <Link to=\"/room\">\n                <button\n                    className=\"RoomButton-button\"\n                    onClick={() => setroomIndex(index)}\n                    style={{ backgroundColor: color }}\n                >{name}\n                </button>\n            </Link>\n        </div>\n    )\n}\n","import React from 'react'\nimport '../css/Title.css'\n\nexport default function Title() {\n    return (\n        <div className=\"Title\">\n            Smart house\n        </div>\n    )\n}\n","import React from 'react'\nimport { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport '../css/RoomWindow.css'\n\n\nexport default function RoomWindow({ setDataRoom, dataRoom, index }) {\n\n    const [flag, setflag] = useState(false)\n    const [Select, setSelect] = useState(\"\")\n\n    const products = dataRoom[index].products\n\n    const SetOption = (e) => {\n        setSelect(e.target.value)\n    }\n\n    const CheckStereoSystemExsist = () => {\n        for (let i = 0; i < products.length; i++) {\n            if (products[i].name === 'stereo system') {\n                return true\n            }\n        }return false\n    }\n\n    const CheckBoilerExsist = () => {\n        for (let i = 0; i < products.length; i++) {\n            if (products[i].name === 'Boiler') {\n                return true\n            }\n        }return false\n    }\n\n    const ProductStatusCheck = () => {\n\n        if(Select === ''){\n            console.log('you have to choose a product');\n            alert('you have to choose a product');\n            setflag(false); \n        }\n        else if (Select === \"stereo system\" && CheckStereoSystemExsist()) {\n            console.log('already have stereo system');\n            alert('already have stereo system');\n            setflag(false); \n        }\n        else if (Select === 'Boiler' && dataRoom[index].select === 'Bathroom' && CheckBoilerExsist()) {\n            console.log('already have Boiler in the Bathroom');\n            alert('already have Boiler in the Bathroom');\n            setflag(false); \n        }\n        else if (products.length >= 5) {\n            console.log('are possible maximum 5 products');\n            alert('are possible maximum 5 products');\n            setflag(false); \n        }\n        else {\n            setDataRoom([...products, { name: Select, mode: \"red\", flag: false }])\n            setSelect(\"\")\n            setflag(false);\n        }\n    }\n\n\n    const showAddProduct = () => {\n        if (flag) {\n            return <div>\n                <select onChange={e => SetOption(e)} >\n                    <option value=\"\">--Please choose an option--</option>\n                    <option value=\"Air-Conditioner\">Air-Conditioner</option>\n                    <option value=\"Boiler\">Boiler</option>\n                    <option value=\"stereo system\">stereo system</option>\n                    <option value=\"light\">light</option>\n                </select>\n                <br />\n                <Link to=\"/room\"><button onClick={ProductStatusCheck} >add</button></Link>\n            </div>\n        } else {\n            return <button onClick={() => setflag(!flag)}>add product</button>\n        }\n    }\n\n    return (\n        <div className=\"RoomWindow\">\n            room name: {dataRoom[index].name}<br />\n            room type: {dataRoom[index].select}<br />\n            {showAddProduct()}\n        </div>\n    )\n}\n\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport '../css/AddRoomButton.css'\n\nexport default function AddRoomButton() {\n    return (\n        <div className=\"AddRoomButton\">\n            <Link to='/addroom'><button>+</button></Link>\n        </div>\n    )\n}\n","import React from 'react';\nimport { withRouter } from 'react-router-dom'\nimport '../css/AddProduct.css'\n\nconst stateByColor = state => state ? 'green' : 'red';\n\nconst AddProduct = ({ toggle, productName, state, index, history }) => {\n    const toggleRoom = () => { toggle(!state, index); history.push('/room') }\n \n    return <button onClick={toggleRoom} style={{ backgroundColor: stateByColor(state) }}>{productName}</button>\n}\nexport default withRouter(AddProduct)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport '../css/Home.css'\n\n\nexport default function Home() {\n    return (\n        <div className=\"Home\">\n            <Link to='/'><button>home</button></Link>\n        </div>\n    )\n}\n","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/App.css';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport AddRoom from './components/AddRoom';\nimport RoomButton from './components/RoomButton';\nimport Title from './components/Title';\nimport RoomWindow from './components/RoomWindow';\nimport AddRoomButton from './components/AddRoomButton';\nimport AddProduct from './components/AddProduct';\nimport Home from './components/Home';\n\n\nconst ProductList = ({dataRoom,roomIndex,toggle }) => {\n  return <div className=\"AddProduct\">\n    {dataRoom[roomIndex].products\n      .map((element, index) => <AddProduct\n        toggle={toggle}\n        productName={element.name}\n        state={element.state}\n        index={index}\n        key={'product-' + index} />)}\n  </div>\n}\n\nfunction App() {\n\n  const [dataRoom, setDataRoom] = useState([])\n  const [roomIndex, setroomIndex] = useState('')\n\n  const comeFromAddRoom = (roomSelect, roomName, roomColor) => {\n    setDataRoom([...dataRoom, { select: roomSelect, name: roomName, color: roomColor, products: [] }])\n  }\n\n  const GetProducts = (list) => {\n    let temp = [];\n    temp = dataRoom;\n    temp[roomIndex].products = list\n    setDataRoom(temp)\n  }\n\n  const toggle = (state, index) => {\n    dataRoom[roomIndex].products[index].state = state\n    setDataRoom(dataRoom)\n  }\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <Router>\n        <Route path='/' component={() => <Home />} />\n        <Switch>\n          <Route exact path='/' component={() => { return <div className=\"RoomButton\">{dataRoom.map((element, index) => <RoomButton setroomIndex={index => setroomIndex(index)} name={element.name} color={element.color} index={index} key={'room-' + index} />)}</div> }} />\n          <Route exact path='/addroom' component={() => <AddRoom setDataRoom={comeFromAddRoom} />} />\n          <Route exact path='/room' component={() => <ProductList dataRoom={dataRoom} roomIndex={roomIndex} toggle={toggle}/>} />\n        </Switch>\n        <Route exact path='/room' component={() => <RoomWindow setDataRoom={GetProducts} dataRoom={dataRoom} index={roomIndex} />} />\n\n        <Route exact path='/' component={() => <AddRoomButton />} />\n      </Router>\n\n\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}