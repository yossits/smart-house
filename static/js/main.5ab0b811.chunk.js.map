{"version":3,"sources":["components/AddRoom.jsx","components/RoomButton.jsx","components/Title.jsx","components/RoomWindow.jsx","components/AddRoomButton.jsx","components/AddProduct.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["withRouter","setDataRoom","history","useState","roomSelectInput","setroomSelectInput","roomNameInput","setRoomNameInput","background","setbackground","show","setShow","className","Alert","variant","onClose","dismissible","Heading","AlertDismissible","DropdownButton","id","title","Dropdown","Item","onClick","onChange","e","target","value","length","maxLength","placeholder","type","onChangeComplete","hex","push","RoomButton","setroomIndex","name","color","index","to","style","backgroundColor","Title","dataRoom","toggle","settoggle","Select","setSelect","products","ProductStatusCheck","console","log","i","CheckStereoSystemExsist","select","CheckBoilerExsist","mode","AddRoomButton","stateByColor","state","productName","Home","ProductList","roomIndex","map","element","key","App","comeFromAddRoom","roomSelect","roomName","roomColor","GetProducts","list","temp","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ab0b811.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport '../css/AddRoom.css'\r\nimport { CirclePicker } from 'react-color'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport DropdownButton  from 'react-bootstrap/DropdownButton'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\n\r\nconst AddRoom =({ setDataRoom, history })=>{\r\n\r\n    const [roomSelectInput, setroomSelectInput] = useState('--Please choose an option--')\r\n    const [roomNameInput, setRoomNameInput] = useState('')\r\n    const [background, setbackground] = useState('#fff')\r\n    const [show, setShow] = useState(false);\r\n\r\n    const roomName = (e) => {\r\n        if (e.target.value.length > 0) {\r\n            setRoomNameInput(e.target.value)\r\n\r\n        } else {\r\n            setRoomNameInput('')\r\n        }\r\n    }\r\n\r\n    const roomColor = (e) => {\r\n        setbackground(e.hex)\r\n    }\r\n\r\n    const sendDateToApp = () => {\r\n        if (roomSelectInput.length < 1 || roomNameInput.length < 1) {\r\n            setShow(true)\r\n        } else {\r\n            setDataRoom(roomSelectInput, roomNameInput, background) \r\n            history.push('/');\r\n        }\r\n    }\r\n\r\n    const AlertDismissible = () =>{\r\n       \r\n        if (show) {\r\n          return (\r\n            <Alert variant=\"danger\" onClose={() => setShow(false)} dismissible>\r\n              <Alert.Heading>You got an error!</Alert.Heading>\r\n              <p>\r\n                you have to choose room name and type\r\n              </p>\r\n            </Alert>\r\n          );\r\n        }\r\n    }\r\n      \r\n\r\n    return (\r\n        <div className=\"AddRoom\">\r\n            {AlertDismissible()}\r\n                <DropdownButton id=\"dropdown-basic-button\" title={roomSelectInput}>\r\n                    <Dropdown.Item onClick={() => setroomSelectInput(\"Bedroom\")} >Bedroom</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => setroomSelectInput(\"kitchen\")} >kitchen</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => setroomSelectInput(\"toilet\")} >toilet</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => setroomSelectInput(\"Bathroom\")} >Bathroom</Dropdown.Item>\r\n                </DropdownButton>\r\n            <br />\r\n            <input\r\n                onChange={roomName}\r\n                maxLength=\"5\"\r\n                placeholder=\" room name...\"\r\n                type=\"text\"\r\n            />\r\n            <br />\r\n            <div className=\"AddRoom-circle\">\r\n                <CirclePicker onChangeComplete={roomColor} />\r\n            </div>\r\n            <br />\r\n            <button onClick={sendDateToApp}>create</button>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default withRouter(AddRoom);","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport '../css/RoomButton.css'\r\n\r\nexport default function RoomButton({ setroomIndex, name, color, index }) {\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Link to=\"/room\">\r\n                <button\r\n                    className=\"RoomButton-button\"\r\n                    onClick={() => setroomIndex(index)}\r\n                    style={{ backgroundColor: color }}\r\n                >{name}\r\n                </button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport '../css/Title.css'\r\n\r\nexport default function Title() {\r\n    return (\r\n        <div className=\"Title\">\r\n            Smart house\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport '../css/RoomWindow.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport DropdownButton  from 'react-bootstrap/DropdownButton'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nconst RoomWindow = ({ setDataRoom, dataRoom, index, history }) => {\r\n\r\n    const [toggle, settoggle] = useState(false)\r\n    const [Select, setSelect] = useState(\"--Please choose an option--\")\r\n    const [show, setShow] = useState(false);\r\n\r\n    const products = dataRoom[index].products\r\n\r\n    const CheckStereoSystemExsist = () => {\r\n        for (let i = 0; i < products.length; i++) {\r\n            if (products[i].name === 'stereo system') {\r\n                return true\r\n            }\r\n        } return false\r\n    }\r\n\r\n    const CheckBoilerExsist = () => {\r\n        for (let i = 0; i < products.length; i++) {\r\n            if (products[i].name === 'Boiler') {\r\n                return true\r\n            }\r\n        } return false\r\n    }\r\n\r\n    const ProductStatusCheck = () => {\r\n\r\n        if (Select === '') {\r\n            console.log('you have to choose a product');\r\n            setShow(true);\r\n            settoggle(false);\r\n        }\r\n        else if (Select === \"stereo system\" && CheckStereoSystemExsist()) {\r\n            console.log('already have stereo system');\r\n            setShow(true);\r\n            settoggle(false);\r\n        }\r\n        else if (Select === 'Boiler' && dataRoom[index].select === 'Bathroom' && CheckBoilerExsist()) {\r\n            console.log('already have Boiler in the Bathroom');\r\n            setShow(true);\r\n            settoggle(false);\r\n        }\r\n        else if (products.length >= 5) {\r\n            console.log('are possible maximum 5 products');\r\n            setShow(true);\r\n            settoggle(false);\r\n        }\r\n        else {\r\n            setDataRoom([...products, { name: Select, mode: \"red\", toggle: false }])\r\n            setSelect(\"--Please choose an option--\")\r\n            settoggle(false);\r\n            history.push('/room');\r\n        }\r\n    }\r\n\r\n\r\n    const showAddProduct = () => {\r\n        if (toggle) {\r\n            return <div>\r\n                <DropdownButton id=\"dropdown-basic-button\" title={Select}>\r\n                    <Dropdown.Item onClick={() => setSelect(\"Air-Conditioner\")} >Air-Conditioner</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => setSelect(\"Boiler\")} >Boiler</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => setSelect(\"stereo system\")} >stereo system</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => setSelect(\"light\")} >light</Dropdown.Item>\r\n                </DropdownButton>\r\n                <br />\r\n                <button onClick={ProductStatusCheck} >add</button>\r\n            </div>\r\n        } else {\r\n            return <button onClick={() => settoggle(!toggle)}>add product</button>\r\n        }\r\n    }\r\n\r\n    const AlertDismissible = () => {\r\n\r\n        if (show) {\r\n            return (\r\n                <Alert variant=\"danger\" onClose={() => setShow(false)} dismissible>\r\n                    <Alert.Heading>You got an error!</Alert.Heading>\r\n                    <p>\r\n                        you have to choose a product<br />\r\n                        already have stereo system<br />\r\n                        already have Boiler in the Bathroom<br />\r\n                        are possible maximum 5 products\r\n              </p>\r\n                </Alert>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"RoomWindow\">\r\n            room name: {dataRoom[index].name}<br />\r\n            room type: {dataRoom[index].select}<br />\r\n            {showAddProduct()}\r\n            {AlertDismissible()}\r\n        </div>\r\n    )\r\n}\r\nexport default withRouter(RoomWindow);\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport '../css/AddRoomButton.css'\r\n\r\nexport default function AddRoomButton() {\r\n    return (\r\n        <div className=\"AddRoomButton\">\r\n            <Link to='/addroom'><button>+</button></Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router-dom'\r\nimport '../css/AddProduct.css'\r\n\r\nconst stateByColor = state => state ? 'green' : 'red';\r\n\r\nconst AddProduct = ({ toggle, productName, state, index, history }) => {\r\n    const toggleRoom = () => { toggle(!state, index); history.push('/room') }\r\n \r\n    return <button onClick={toggleRoom} style={{ backgroundColor: stateByColor(state) }}>{productName}</button>\r\n}\r\nexport default withRouter(AddProduct)\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport '../css/Home.css'\r\n\r\n\r\nexport default function Home() {\r\n    return (\r\n        <div className=\"Home\">\r\n            <Link to='/'><button>home</button></Link>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './css/App.css';\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport AddRoom from './components/AddRoom';\r\nimport RoomButton from './components/RoomButton';\r\nimport Title from './components/Title';\r\nimport RoomWindow from './components/RoomWindow';\r\nimport AddRoomButton from './components/AddRoomButton';\r\nimport AddProduct from './components/AddProduct';\r\nimport Home from './components/Home';\r\n\r\n\r\nconst ProductList = ({dataRoom,roomIndex,toggle }) => {\r\n  return <div className=\"AddProduct\">\r\n    {dataRoom[roomIndex].products\r\n      .map((element, index) => <AddProduct\r\n        toggle={toggle}\r\n        productName={element.name}\r\n        state={element.state}\r\n        index={index}\r\n        key={'product-' + index} />)}\r\n  </div>\r\n}\r\n\r\nfunction App() {\r\n\r\n  const [dataRoom, setDataRoom] = useState([])\r\n  const [roomIndex, setroomIndex] = useState('')\r\n\r\n  const comeFromAddRoom = (roomSelect, roomName, roomColor) => {\r\n    setDataRoom([...dataRoom, { select: roomSelect, name: roomName, color: roomColor, products: [] }])\r\n  }\r\n\r\n  const GetProducts = (list) => {\r\n    let temp = [];\r\n    temp = dataRoom;\r\n    temp[roomIndex].products = list\r\n    setDataRoom(temp)\r\n  }\r\n\r\n  const toggle = (state, index) => {\r\n    dataRoom[roomIndex].products[index].state = state\r\n    setDataRoom(dataRoom)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Title />\r\n      <Router>\r\n        <Route path='/' component={() => <Home />} />\r\n        <Switch>\r\n          <Route exact path='/' component={() => { return <div className=\"RoomButton\">{dataRoom.map((element, index) => <RoomButton setroomIndex={index => setroomIndex(index)} name={element.name} color={element.color} index={index} key={'room-' + index} />)}</div> }} />\r\n          <Route exact path='/addroom' component={() => <AddRoom setDataRoom={comeFromAddRoom} />} />\r\n          <Route exact path='/room' component={() => <ProductList dataRoom={dataRoom} roomIndex={roomIndex} toggle={toggle}/>} />\r\n        </Switch>\r\n        <Route exact path='/room' component={() => <RoomWindow setDataRoom={GetProducts} dataRoom={dataRoom} index={roomIndex} />} />\r\n\r\n        <Route exact path='/' component={() => <AddRoomButton />} />\r\n      </Router>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}