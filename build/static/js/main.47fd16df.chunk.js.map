{"version":3,"sources":["components/AddRoom.jsx","components/RoomButton.jsx","components/Title.jsx","components/RoomWindow.jsx","components/AddRoomButton.jsx","components/AddProduct.jsx","App.js","serviceWorker.js","index.js"],"names":["AddRoom","setDataRoom","useState","roomSelectInput","setroomSelectInput","roomNameInput","setRoomNameInput","roomColorInput","setRoomColorInput","onChange","e","target","value","name","label","length","maxLength","placeholder","type","to","onClick","alert","RoomButton","setroomIndex","color","index","style","backgroundColor","Title","RoomWindow","dataRoom","flag","setflag","Select","setSelect","products","ProductStatusCheck","console","log","i","CheckStereoSystemExsist","select","CheckBoilerExsist","mode","SetOption","AddRoomButton","AddProduct","TurnOnOff","productName","App","roomIndex","comeFromAddRoom","roomSelect","roomName","roomColor","GetProducts","list","temp","className","path","component","exact","map","element","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47fd16df.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function AddRoom({setDataRoom}) {\r\n\r\n    const [roomSelectInput, setroomSelectInput] = useState('')\r\n    const [roomNameInput, setRoomNameInput] = useState('')\r\n    const [roomColorInput, setRoomColorInput] = useState('white')    \r\n\r\n    const roomName = (e) => {\r\n        if (e.target.value.length > 0) {\r\n            setRoomNameInput(e.target.value)\r\n\r\n        } else {\r\n            setRoomNameInput('')\r\n        }\r\n    }\r\n\r\n    const roomColor = (e) => {\r\n        if (e.target.value.length > 0) {\r\n            setRoomColorInput(e.target.value)\r\n        } else {\r\n            setRoomColorInput('white')\r\n        }\r\n    }\r\n\r\n    const sendDateToApp = () => {\r\n        if (roomSelectInput.length < 1 || roomNameInput.length < 1) {\r\n            alert('ERROR!');\r\n        } else {\r\n            setDataRoom(roomSelectInput, roomNameInput, roomColorInput)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <select onChange={(e) => { setroomSelectInput(e.target.value) }} name=\"room\">\r\n                <option value=\"\">--Please choose an option--</option>\r\n                <option value=\"Bedroom\">Bedroom</option>\r\n                <option value=\"kitchen\">kitchen</option>\r\n                <optgroup label=\"Bathroom/toilet\">\r\n                    <option value=\"toilet\">toilet</option>\r\n                    <option value=\"Bathroom\">Bathroom</option>\r\n                </optgroup>\r\n            </select>\r\n            <br />\r\n            <input\r\n                onChange={roomName}\r\n                maxLength=\"5\"\r\n                placeholder=\" room name...\"\r\n                type=\"text\"\r\n            />\r\n            <br />\r\n            <input\r\n                onChange={roomColor}\r\n                placeholder=\" room color...\"\r\n                type=\"text\"\r\n            />\r\n            <br />\r\n            <Link to='/'><button onClick={sendDateToApp}>create</button></Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function RoomButton({ setroomIndex, name, color, index }) {\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Link to=\"/room\">\r\n                <button\r\n                    onClick={() => setroomIndex(index)}\r\n                    style={{ backgroundColor: color }}\r\n                >{name}\r\n                </button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Title() {\r\n    return (\r\n        <div>\r\n            Smart house\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function RoomWindow({ setDataRoom, dataRoom, index }) {\r\n\r\n    const [flag, setflag] = useState(false)\r\n    const [Select, setSelect] = useState(\"\")\r\n\r\n    const products = dataRoom[index].products\r\n\r\n    const SetOption = (e) => {\r\n        setSelect(e.target.value)\r\n    }\r\n\r\n    const CheckStereoSystemExsist = () => {\r\n        for (let i = 0; i < products.length; i++) {\r\n            if (products[i].name === 'stereo system') {\r\n                return true\r\n            }\r\n        }return false\r\n    }\r\n\r\n    const CheckBoilerExsist = () => {\r\n        for (let i = 0; i < products.length; i++) {\r\n            if (products[i].name === 'Boiler') {\r\n                return true\r\n            }\r\n        }return false\r\n    }\r\n\r\n    const ProductStatusCheck = () => {\r\n\r\n        if(Select === ''){\r\n            console.log('you have to choose a product');\r\n            alert('you have to choose a product');\r\n            setflag(false); \r\n        }\r\n        else if (Select === \"stereo system\" && CheckStereoSystemExsist()) {\r\n            console.log('already have stereo system');\r\n            alert('already have stereo system');\r\n            setflag(false); \r\n        }\r\n        else if (Select === 'Boiler' && dataRoom[index].select === 'Bathroom' && CheckBoilerExsist()) {\r\n            console.log('already have Boiler in the Bathroom');\r\n            alert('already have Boiler in the Bathroom');\r\n            setflag(false); \r\n        }\r\n        else if (products.length >= 5) {\r\n            console.log('are possible maximum 5 products');\r\n            alert('are possible maximum 5 products');\r\n            setflag(false); \r\n        }\r\n        else {\r\n            setDataRoom([...products, { name: Select, mode: \"red\", flag: false }])\r\n            setSelect(\"\")\r\n            setflag(false);\r\n        }\r\n    }\r\n\r\n\r\n    const showAddProduct = () => {\r\n        if (flag) {\r\n            return <div>\r\n                <select onChange={e => SetOption(e)} >\r\n                    <option value=\"\">--Please choose an option--</option>\r\n                    <option value=\"Air-Conditioner\">Air-Conditioner</option>\r\n                    <option value=\"Boiler\">Boiler</option>\r\n                    <option value=\"stereo system\">stereo system</option>\r\n                    <option value=\"light\">light</option>\r\n                </select>\r\n                <br />\r\n                <Link to=\"/room\"><button onClick={ProductStatusCheck} >add</button></Link>\r\n            </div>\r\n        } else {\r\n            return <button onClick={() => setflag(!flag)}>add product</button>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            room name: {dataRoom[index].name}<br />\r\n            room type: {dataRoom[index].select}<br />\r\n            {showAddProduct()}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function AddRoomButton() {\r\n    return (\r\n        <div>\r\n            <Link to='/addroom'><button>+</button></Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function AddProduct({ TurnOnOff, productName, mode, flag, index }) {\r\n\r\n    return (\r\n        <div>\r\n            <Link to=\"/room\"><button onClick={()=>TurnOnOff(!flag, index)} style={{ backgroundColor: mode }}>{productName}</button></Link>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react';\nimport './css/App.css';\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport AddRoom from './components/AddRoom';\nimport RoomButton from './components/RoomButton';\nimport Title from './components/Title';\nimport RoomWindow from './components/RoomWindow';\nimport AddRoomButton from './components/AddRoomButton';\nimport AddProduct from './components/AddProduct';\n\n\nfunction App() {\n\n  const [dataRoom, setDataRoom] = useState([])\n  const [roomIndex, setroomIndex] = useState('')\n\n  const comeFromAddRoom = (roomSelect, roomName, roomColor) => {\n    setDataRoom([...dataRoom, { select: roomSelect, name: roomName, color: roomColor, products: [] }])\n  }\n\n  const GetProducts = (list) => {\n    let temp = [];\n    temp = dataRoom;\n    temp[roomIndex].products = list\n    setDataRoom(temp)\n\n\n  }\n\n  const TurnOnOff = (flag,index) => {\n    let temp = dataRoom\n    if (flag) {\n      temp[roomIndex].products[index].mode = 'green'\n      temp[roomIndex].products[index].flag = true\n      setDataRoom(temp)\n    }\n    else {\n      temp[roomIndex].products[index].mode = 'red'\n      temp[roomIndex].products[index].flag = false\n      setDataRoom(temp)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <Router>\n        <Route path='/' component={() => <Link to='/'><button>home</button></Link>} />\n        <Switch>\n          <Route exact path='/' component={() => dataRoom.map((element, index) => <RoomButton setroomIndex={index => setroomIndex(index)} name={element.name} color={element.color} index={index} key={'room-' + index} />)} />\n          <Route exact path='/addroom' component={() => <AddRoom setDataRoom={comeFromAddRoom} />} />\n          <Route exact path='/room' component={() => <RoomWindow setDataRoom={GetProducts} dataRoom={dataRoom} index={roomIndex} />} />\n        </Switch>\n\n        <Route exact path='/room' component={() => dataRoom[roomIndex].products.map((element, index) => <AddProduct TurnOnOff={TurnOnOff} productName={element.name} mode={element.mode} flag={element.flag} index={index} key={'product-' + index} />)} />\n        <Route exact path='/' component={() => <AddRoomButton />} />\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}